@using CollectionApp.Application.ViewModels
@using CollectionApp.Domain.Enums
@using Tracker_Money.Helpers
@model IReadOnlyList<ContractInstallmentSummaryVM>

@section Styles {
    <link href="~/css/Contract/ContractInstallments.css" rel="stylesheet" />
}
@if (!Model.Any())
{
    <div class="text-center py-3">
        <i class="fas fa-calendar-times fa-2x text-muted mb-2"></i>
        <p class="text-muted mb-0">No installments found for this contract.</p>
    </div>
}
else
{
    <!-- Installment Summary -->
    <div class="row mb-3">
        <div class="col-md-3">
            <div class="d-flex justify-content-between">
                <span>Total:</span>
                <span class="fw-bold">@Model.Count()</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="d-flex justify-content-between">
                <span>Paid:</span>
                <span class="fw-bold text-success">@Model.Count(i => i.Status == InstallmentStatus.Paid)</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="d-flex justify-content-between">
                <span>Overdue:</span>
                <span class="fw-bold text-danger">@Model.Count(i => i.Status == InstallmentStatus.Overdue)</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="d-flex justify-content-between">
                <span>Outstanding:</span>
                <span class="fw-bold text-warning">@Tracker_Money.Helpers.CurrencyFormatter.Format(Model.Sum(i => i.Amount - i.PaidAmount), Model.FirstOrDefault()?.Currency ?? "USD")</span>
            </div>
        </div>
    </div>

    <!-- Installments Table -->
    <div class="table-responsive">
        <table class="table table-sm table-striped">
            <thead class="table-light">
                <tr>
                    <th>
                        <input type="checkbox" id="selectAllInstallments" onclick="toggleBulkSelection(this.checked)" />
                    </th>
                    <th>#</th>
                    <th>Due Date</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var installment in Model.OrderBy(i => i.InstallmentNumber))
                {
                    var rowClass = installment.Status switch
                    {
                        InstallmentStatus.Paid => "table-success",
                        InstallmentStatus.Overdue => "table-danger",
                        InstallmentStatus.Pending => "table-warning",
                        _ => ""
                    };

                    <tr class="@rowClass">
                        <td>
                            <input type="checkbox" class="form-check-input installment-select" value="@installment.Id" />
                        </td>
                        <td>
                            <strong>@installment.InstallmentNumber</strong>
                        </td>
                        <td>@installment.DueDate.ToString("MMM dd, yyyy")</td>
                        <td>
                            <span class="fw-bold">@Tracker_Money.Helpers.CurrencyFormatter.Format(installment.Amount, installment.Currency)</span>
                        </td>
                        <td>
                            <status-badge value="@installment.Status"></status-badge>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                @if (installment.Status == InstallmentStatus.Paid)
                                {
                                    <button type="button" class="btn btn-sm btn-outline-info" title="View Payment" data-action="view-payment" data-installment-id="@installment.Id">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                }
                                else if (installment.Status == InstallmentStatus.Pending || installment.Status == InstallmentStatus.Overdue)
                                {
                                    <button type="button" class="btn btn-sm btn-outline-success" title="Record Payment"
                                            data-action="record-payment" data-installment-id="@installment.Id" data-installment-number="@installment.InstallmentNumber" data-installment-amount="@installment.Amount">
                                        <i class="fas fa-credit-card"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-warning" title="Reschedule"
                                            data-action="reschedule-installment" data-installment-id="@installment.Id">
                                        <i class="fas fa-calendar-alt"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger" title="Waive"
                                            data-action="waive-installment" data-installment-id="@installment.Id">
                                        <i class="fas fa-ban"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-secondary" title="Split"
                                            data-action="split-installment" data-installment-id="@installment.Id">
                                        <i class="fas fa-divide"></i>
                                    </button>
                                }
                                <button type="button" class="btn btn-sm btn-outline-primary" title="View Details">
                                    <i class="fas fa-info-circle"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Quick Actions -->
    <div class="mt-3">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="filterInstallments('all')">All</button>
            <button type="button" class="btn btn-outline-success btn-sm" onclick="filterInstallments('paid')">Paid</button>
            <button type="button" class="btn btn-outline-warning btn-sm" onclick="filterInstallments('pending')">Pending</button>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="filterInstallments('overdue')">Overdue</button>
        </div>
        <div class="btn-group ms-2" role="group">
            <button type="button" class="btn btn-sm btn-outline-danger" onclick="bulkWaive()">Bulk Waive</button>
            <button type="button" class="btn btn-sm btn-outline-warning" onclick="bulkReschedule()">Bulk Reschedule</button>
            <button type="button" class="btn btn-sm btn-outline-success" onclick="bulkMarkPaid()">Bulk Mark Paid</button>
        </div>
    </div>
}

<script>
    function filterInstallments(status) {
        const rows = document.querySelectorAll('tbody tr');
        rows.forEach(function(r){
            if(status==='all'){ r.style.display=''; return; }
            const isPaid = r.classList.contains('table-success');
            const isOverdue = r.classList.contains('table-danger');
            const isPending = r.classList.contains('table-warning');
            const show = (status==='paid' && isPaid) || (status==='overdue' && isOverdue) || (status==='pending' && isPending);
            r.style.display = show ? '' : 'none';
        });
    }

    function getSelectedInstallments(){
        const ids = [];
        document.querySelectorAll('.installment-select:checked').forEach(function(cb){ ids.push(cb.value); });
        return ids;
    }

    function bulkWaive(){
        const ids = getSelectedInstallments(); if(ids.length===0){ alert('Select installments'); return; }
        processBulkActions('Waive', ids);
    }
    function bulkReschedule(){
        const ids = getSelectedInstallments(); if(ids.length===0){ alert('Select installments'); return; }
        processBulkActions('Reschedule', ids);
    }
    function bulkMarkPaid(){
        const ids = getSelectedInstallments(); if(ids.length===0){ alert('Select installments'); return; }
        processBulkActions('MarkPaid', ids);
    }
</script>