@using CollectionApp.Application.ViewModels
@using CollectionApp.Domain.Enums
@using Tracker_Money.Helpers
@model ContractDetailVM
@{
    ViewData["Title"] = $"Installments - {Model.ContractNumber}";
}

@section Styles {
    <link href="~/css/Contract/Installments.css" rel="stylesheet" />
}

<div class="container-fluid">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-action="Index">Contracts</a></li>
            <li class="breadcrumb-item"><a asp-action="Details" asp-route-id="@Model.Id">@Model.ContractNumber</a></li>
            <li class="breadcrumb-item active" aria-current="page">Installments</li>
        </ol>
    </nav>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="card-title">
                            <i class="fas fa-calendar-alt me-2"></i>Installments - @Model.ContractNumber
                        </h3>
                        <div class="btn-group" role="group">
                            <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-1"></i>Back to Contract
                            </a>
                            @if (!Model.Installments.Any())
                            {
                                <form asp-action="GenerateInstallments" asp-route-id="@Model.Id" method="post" style="display: inline;">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-plus me-1"></i>Generate Installments
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Contract Header -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h6 class="card-title">Total Amount</h6>
                                    <h4 class="text-primary">@CurrencyFormatter.Format(Model.TotalAmount, Model.Currency)</h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h6 class="card-title">Outstanding Amount</h6>
                                    <h4 class="@(Model.OutstandingAmount > 0 ? "text-danger" : "text-success")">
                                        @CurrencyFormatter.Format(Model.OutstandingAmount, Model.Currency)
                                    </h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h6 class="card-title">Total Installments</h6>
                                    <h4 class="text-info">@Model.Installments.Count()</h4>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-light">
                                <div class="card-body text-center">
                                    <h6 class="card-title">Paid Installments</h6>
                                    <h4 class="text-success">@Model.Installments.Count(i => i.Status == InstallmentStatus.Paid)</h4>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Installments Summary -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0"><i class="fas fa-chart-pie me-2"></i>Installment Summary</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-6">
                                            <div class="d-flex justify-content-between">
                                                <span>Paid:</span>
                                                <span class="fw-bold text-success">@Model.Installments.Count(i => i.Status == InstallmentStatus.Paid)</span>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <span>Pending:</span>
                                                <span class="fw-bold text-warning">@Model.Installments.Count(i => i.Status == InstallmentStatus.Pending)</span>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="d-flex justify-content-between">
                                                <span>Overdue:</span>
                                                <span class="fw-bold text-danger">@Model.Installments.Count(i => i.Status == InstallmentStatus.Overdue)</span>
                                            </div>
                                            <div class="d-flex justify-content-between">
                                                <span>Upcoming:</span>
                                                <span class="fw-bold text-info">@Model.Installments.Count(i => i.Status == InstallmentStatus.Pending && i.DueDate > DateTime.Now)</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Contract Information</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-6">
                                            <small class="text-muted">Customer:</small><br>
                                            <strong>@Model.CustomerName</strong>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Payment Frequency:</small><br>
                                            <strong>@Model.PaymentFrequency</strong>
                                        </div>
                                    </div>
                                    <hr>
                                    <div class="row">
                                        <div class="col-6">
                                            <small class="text-muted">Start Date:</small><br>
                                            <strong>@Model.StartDate.ToString("MMM dd, yyyy")</strong>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Next Due:</small><br>
                                            <strong>
                                                @{
                                                    var nextDue = Model.Installments
                                                        .Where(i => i.Status == InstallmentStatus.Pending || i.Status == InstallmentStatus.Overdue)
                                                        .OrderBy(i => i.DueDate)
                                                        .FirstOrDefault();
                                                }
                                                @(nextDue?.DueDate.ToString("MMM dd, yyyy") ?? "N/A")
                                            </strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Installments Table -->
                    <div class="card">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><i class="fas fa-list me-2"></i>Installment Schedule</h5>
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="filterInstallments('all')">All</button>
                                    <button type="button" class="btn btn-outline-success btn-sm" onclick="filterInstallments('paid')">Paid</button>
                                    <button type="button" class="btn btn-outline-warning btn-sm" onclick="filterInstallments('pending')">Pending</button>
                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="filterInstallments('overdue')">Overdue</button>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (Model.Installments.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover" id="installmentsTable">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>#</th>
                                                <th>Due Date</th>
                                                <th>Amount</th>
                                                <th>Status</th>
                                                <th>Paid Amount</th>
                                                <th>Remaining</th>
                                                <th>Payment Date</th>
                                                <th>Days Overdue</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var installment in Model.Installments.OrderBy(i => i.InstallmentNumber))
                                            {
                                                var daysOverdue = installment.Status == InstallmentStatus.Overdue ? 
                                                    (DateTime.Now - installment.DueDate).Days : 0;
                                                var rowClass = installment.Status switch
                                                {
                                                    InstallmentStatus.Paid => "table-success",
                                                    InstallmentStatus.Overdue => "table-danger",
                                                    InstallmentStatus.Pending => "table-warning",
                                                    _ => ""
                                                };

                                                <tr class="@rowClass installment-row" data-status="@installment.Status.ToString().ToLower()">
                                                    <td>
                                                        <strong>@installment.InstallmentNumber</strong>
                                                    </td>
                                                    <td>@installment.DueDate.ToString("MMM dd, yyyy")</td>
                                                    <td>
                                                        <span class="fw-bold">@CurrencyFormatter.Format(installment.Amount, Model.Currency)</span>
                                                    </td>
                                                    <td>
                                                        <status-badge value="@installment.Status"></status-badge>
                                                    </td>
                                                    <td>
                                                        @if (installment.PaidAmount > 0)
                                                        {
                                                            <span class="text-success">@CurrencyFormatter.Format(installment.PaidAmount, Model.Currency)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @{
                                                            var remaining = installment.Amount - installment.PaidAmount;
                                                        }
                                                        @if (remaining > 0)
                                                        {
                                                            <span class="text-danger fw-bold">@CurrencyFormatter.Format(remaining, Model.Currency)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-success">@CurrencyFormatter.Format(remaining, Model.Currency)</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (installment.PaymentDate.HasValue)
                                                        {
                                                            @installment.PaymentDate.Value.ToString("MMM dd, yyyy")
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (daysOverdue > 0)
                                                        {
                                                            <span class="text-danger fw-bold">@daysOverdue days</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div class="btn-group" role="group">
                                                            @if (installment.Status == InstallmentStatus.Paid)
                                                            {
                                                                <button type="button" class="btn btn-sm btn-outline-info" title="View Payment Details">
                                                                    <i class="fas fa-eye"></i>
                                                                </button>
                                                            }
                                                            else if (installment.Status == InstallmentStatus.Pending || installment.Status == InstallmentStatus.Overdue)
                                                            {
                                                                <button type="button" class="btn btn-sm btn-outline-success" title="Record Payment" 
                                                                        onclick="recordPayment(@installment.InstallmentNumber)">
                                                                    <i class="fas fa-credit-card"></i>
                                                                </button>
                                                            }
                                                            <button type="button" class="btn btn-sm btn-outline-primary" title="View Details">
                                                                <i class="fas fa-info-circle"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Summary Footer -->
                                <div class="row mt-3">
                                    <div class="col-md-6">
                                        <div class="d-flex justify-content-between">
                                            <span class="fw-bold">Total Amount:</span>
                                            <span class="fw-bold">@CurrencyFormatter.Format(Model.Installments.Sum(i => i.Amount), Model.Currency)</span>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span>Total Paid:</span>
                                            <span class="text-success">@CurrencyFormatter.Format(Model.Installments.Sum(i => i.PaidAmount), Model.Currency)</span>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span>Total Outstanding:</span>
                                            <span class="text-danger fw-bold">@CurrencyFormatter.Format(Model.Installments.Sum(i => i.Amount - i.PaidAmount), Model.Currency)</span>
                                        </div>
                                    </div>
                                    <div class="col-md-6 text-end">
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-outline-primary" onclick="exportToExcel()">
                                                <i class="fas fa-file-excel me-1"></i>Export to Excel
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary" onclick="printSchedule()">
                                                <i class="fas fa-print me-1"></i>Print Schedule
                                            </button>
                                            @if (Model.Installments.Any())
                                            {
                                                <form asp-action="GenerateInstallments" asp-route-id="@Model.Id" method="post" style="display: inline;">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-outline-warning" 
                                                            onclick="return confirm('This will regenerate all installments. Are you sure?')">
                                                        <i class="fas fa-sync-alt me-1"></i>Regenerate
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                                    <h5 class="text-muted">No Installments Found</h5>
                                    <p class="text-muted">This contract doesn't have any installments yet.</p>
                                    <form asp-action="GenerateInstallments" asp-route-id="@Model.Id" method="post">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-primary">
                                            <i class="fas fa-plus me-1"></i>Generate Installments
                                        </button>
                                    </form>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Payment Recording Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Record Payment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="paymentForm">
                    <div class="mb-3">
                        <label for="installmentNumber" class="form-label">Installment Number</label>
                        <input type="text" class="form-control" id="installmentNumber" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="paymentAmount" class="form-label">Payment Amount <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="paymentAmount" step="0.01" min="0" required>
                    </div>
                    <div class="mb-3">
                        <label for="paymentDate" class="form-label">Payment Date <span class="text-danger">*</span></label>
                        <input type="date" class="form-control" id="paymentDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="paymentMethod" class="form-label">Payment Method</label>
                        <select class="form-select" id="paymentMethod">
                            <option value="Cash">Cash</option>
                            <option value="Bank Transfer">Bank Transfer</option>
                            <option value="Check">Check</option>
                            <option value="Credit Card">Credit Card</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="paymentNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="paymentNotes" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitPayment()">Record Payment</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Set current date as default payment date
            $('#paymentDate').val(new Date().toISOString().split('T')[0]);
        });

        function filterInstallments(status) {
            $('.installment-row').show();
            if (status !== 'all') {
                // Convert status names to lowercase to match data-status attribute
                $('.installment-row').not(`[data-status="${status}"]`).hide();
            }
        }

        function recordPayment(installmentNumber) {
            $('#installmentNumber').val(installmentNumber);
            $('#paymentAmount').val('');
            $('#paymentDate').val(new Date().toISOString().split('T')[0]);
            $('#paymentMethod').val('Cash');
            $('#paymentNotes').val('');
            $('#paymentModal').modal('show');
        }

        function submitPayment() {
            // This would typically make an AJAX call to record the payment
            alert('Payment recording functionality would be implemented here.');
            $('#paymentModal').modal('hide');
        }

        function exportToExcel() {
            // This would typically generate and download an Excel file
            alert('Export to Excel functionality would be implemented here.');
        }

        function printSchedule() {
            window.print();
        }

        // Auto-refresh overdue status
        setInterval(function() {
            // This would typically make an AJAX call to refresh overdue status
            console.log('Checking for overdue installments...');
        }, 60000); // Check every minute
    </script>
}