@using Microsoft.AspNetCore.Routing
@model Tracker_Money.Models.IPagedViewModel
@section Styles {
    <link href="~/css/Components/Pager.css" rel="stylesheet" />
}
<nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), new RouteValueDictionary(Model.RouteValues) { ["page"] = 1, ["pageSize"] = Model.PageSize })" aria-label="First">
                <span aria-hidden="true">&laquo;&laquo;</span>
            </a>
        </li>
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), new RouteValueDictionary(Model.RouteValues) { ["page"] = Model.PageNumber - 1, ["pageSize"] = Model.PageSize })" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }

        @{
            var startPage = Math.Max(1, Model.PageNumber - 2);
            var endPage = Math.Min(Model.TotalPages, startPage + 4);
            
            if (endPage - startPage < 4 && Model.TotalPages > 4)
            {
                startPage = Math.Max(1, endPage - 4);
            }
        }

        @for (int i = startPage; i <= endPage; i++)
        {
            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), new RouteValueDictionary(Model.RouteValues) { ["page"] = i, ["pageSize"] = Model.PageSize })">@i</a>
            </li>
        }

        @if (Model.HasNextPage)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), new RouteValueDictionary(Model.RouteValues) { ["page"] = Model.PageNumber + 1, ["pageSize"] = Model.PageSize })" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <a class="page-link" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }

        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link" href="@Url.Action(ViewContext.RouteData.Values["action"]?.ToString(), new RouteValueDictionary(Model.RouteValues) { ["page"] = Model.TotalPages, ["pageSize"] = Model.PageSize })" aria-label="Last">
                <span aria-hidden="true">&raquo;&raquo;</span>
            </a>
        </li>
    </ul>

    <form method="get" class="d-inline-block ms-3">
        @foreach (var kvp in Model.RouteValues)
        {
            if (kvp.Key != "pageSize" && kvp.Key != "page")
            {
                <input type="hidden" name="@kvp.Key" value="@kvp.Value" />
            }
        }
        <label for="pageSize" class="form-label me-2">Page size</label>
        <select id="pageSize" name="pageSize" class="form-select d-inline-block" style="width:auto" onchange="this.form.submit()">
            @{ var sizes = new[] { 10, 20, 50, 100 }; }
            @foreach (var s in sizes)
            {
                @if (s == Model.PageSize)
                {
                    <option value="@s" selected>@s</option>
                }
                else
                {
                    <option value="@s">@s</option>
                }
            }
        </select>
        <input type="hidden" name="page" value="1" />
    </form>
</nav>